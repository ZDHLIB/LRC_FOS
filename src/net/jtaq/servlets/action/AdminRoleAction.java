/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package net.jtaq.servlets.action;

import java.util.Collection;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.jtaq.managers.AdminAdmin;
import net.jtaq.managers.RightsAdmin;
import net.jtaq.servlets.form.AdminRoleForm;
import net.jtaq.servlets.form.RoleFunctionForm;
import net.jtaq.utils.AdminDetails;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

/**
 * MyEclipse Struts Creation date: 06-09-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class AdminRoleAction extends DispatchAction {

	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception

	{
		AdminAdmin aa = new AdminAdmin();
		AdminRoleForm arf = (AdminRoleForm) form;

		int RoleID = 0;// Integer.parseInt((String)arf.getRoleID());

		int adminID = Integer.parseInt((String) arf.getAdminID());

		AdminDetails admin = (AdminDetails) request.getSession().getAttribute("admin");
		int OperationID = admin.getAdminID();

		String RoleIDStr = (String) arf.getRoleID();
		boolean isAdd = false;
		if (null != RoleIDStr && !"".equalsIgnoreCase(RoleIDStr)) {
			String[] RoleIDArray = RoleIDStr.split(",");
			for (int i = 0; i < RoleIDArray.length; i++) {
				String RoleIDString = RoleIDArray[i];
				RoleID = Integer.parseInt(RoleIDString);
				aa.deleteRoleOfAdmin(adminID, RoleID);
				isAdd = aa.addRoleOfAdmin(adminID, RoleID, OperationID);
				if (!isAdd)
					break;
			}

		} else {
			isAdd = aa.deleteALlRoleOfAdmin(adminID);
		}

		if (isAdd) {
			// return mapping.findForward("add_success");
			// fof.setIsAdd(true);
			String CONTENT_TYPE = "text/html; charset=utf-8";
			response.setContentType(CONTENT_TYPE);
			response.getWriter().write(
					"<script>alert('操作成功！');history.go(-1);</script>");
			return null;// list(mapping,form,request,response);
			// return null;
		}

		return mapping.findForward("add_error");
	}

	public ActionForward remove(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		AdminAdmin aa = new AdminAdmin();
		AdminRoleForm arf = (AdminRoleForm) form;

		int RoleID = Integer.parseInt((String) arf.getRoleID());

		int adminID = Integer.parseInt((String) arf.getAdminID());

		boolean isdel = aa.deleteRoleOfAdmin(adminID, RoleID);

		if (isdel) {
			arf.setIsRemove(true);
			// return mapping.findForward("remove_success");
			return list(mapping, form, request, response);
		}

		return mapping.findForward("remove_error");

	}

	@SuppressWarnings("unchecked")
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		Collection roles;
		Collection rolesOfAdmin;
		AdminAdmin aa = new AdminAdmin();
		RightsAdmin ra = new RightsAdmin();
		AdminRoleForm arf = (AdminRoleForm) form;

		int adminID = Integer.parseInt((String) arf.getAdminID());

		try {
			roles = ra.getAllRoles();
			arf.setRoles(roles);
			rolesOfAdmin = aa.getRolesOfAdmin(adminID);
			request.setAttribute("rolesOfAdmin", rolesOfAdmin);
		} catch (Exception e) {
			return mapping.findForward("list_success");
		}
		return mapping.findForward("list_success");
	}
}